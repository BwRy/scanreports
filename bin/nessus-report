#!/usr/bin/env python
#
# Show results from mbsa reports
#

import os,sys,logging

from seine.address import IPv4Address,IPv6Address

from scanreports.script import prepare,initialize,error
from scanreports import ReportParserError
from scanreports.nessus import NessusXMLReport,NessusResultSet
from scanreports.reports import ScanReport,CSVReport,HTMLReport,ExcelReport

DEFAULT_FILTERED_PLUGINS = [0]
SEVERITY_NAMES = ['Info','Low','Medium','High']

REPORT_FIELD_ORDER = [
    'synopsis',
    'exploitability_ease',
    'solution',
    'description',
    'cve',
    'xref',
    'see_also',
]
REPORT_FIELD_TITLES = {
    'hosts':                 'Hosts',
    'synopsis':             'Synopsis',
    'exploitability_ease':  'Exploitability',
    'solution':             'Solution',
    'description':          'Description',
    'cve':                  'CVEs',
    'xref':                 'References',
    'see_also':             'Links',
}

parser = prepare(sys.argv)
parser.set_usage("""%s [options] <nessus-xml-report>

Processes the nessus XML report (only one!) given on command line and outputs
details from the report according to given options.""" % 
    os.path.basename(sys.argv[0])
)   
parser.set_defaults(**{'title': 'Scan Report'})
parser.add_option('-a','--addresses',help='Only show given addresses from report')
parser.add_option('-x','--output-xls',help='Write output to XLS file')
parser.add_option('-o','--output-html',help='Write output to HTML file')
parser.add_option('-O','--output-csv',help='Write output to CSV file')
parser.add_option('-p','--plugin-output',action='store_true',help='Add plugin outputs to report')
parser.add_option('-t','--title',help='Report title')
parser.add_option('-f','--filter-plugins',help='File listing filtered plugin IDs')
parser.add_option('-g','--group-by-host',action='store_true',help='Group Findings by Host')
parser.add_option('-l','--list-plugin-ids',action='store_true',help='List plugin IDs with data')
(opts,args) = initialize(parser)
log = logging.getLogger('console')

if len(args) == 0:
    sys.exit(error(parser.get_usage()))

def id_details_cmp(data,x,y):
    if data[x][0] != data[y][0]:
        return cmp(data[x][0],data[y][0])
    return cmp(data[x][1],data[y][1])

outputs = []
if opts.output_html:
    outputs.append(HTMLReport(opts.output_html))
if opts.output_csv:
    outputs.append(CSVReport(opts.output_csv))
if opts.output_xls:
    r = ExcelReport(opts.output_xls)
    # Extend column 1 to 6x normal size
    r.widths[1] = 6
    outputs.append(r)
if len(outputs)==0:
    outputs.append(ScanReport())

try:
    reports = []
    nms = NessusResultSet()

    for report in args:
        log.debug('Loading: %s' % report)
        reports.append(NessusXMLReport(report))

    for out in outputs:
        out.reportformat = 'Nessus'
        out.topic = opts.title

    if opts.filter_plugins:
        filtered_ids = nms.merge_pluginlist_file(
            opts.filter_plugins,
            set(DEFAULT_FILTERED_PLUGINS)
        )
    else:
        filtered_ids = list(set(DEFAULT_FILTERED_PLUGINS))

    if opts.addresses: 
        addresses = nms.load_addresslist(opts.addresses.split(','))
    else:
        addresses = []

    log.debug('Merging reports')
    nms.load(reports,filtered=filtered_ids,addresses=addresses)

    if opts.list_plugin_ids:
        id_details = {}
        for r in nms:
            if r.pluginID in id_details.keys():
                continue
            id_details[r.pluginID] = [r.severity,r.pluginName]
        # Sort by severity
        id_keys_sorted = sorted(id_details.keys(),
            lambda x,y: id_details_cmp(id_details,x,y)
        )
        for pid in id_keys_sorted:
            severity,name = id_details[pid]
            print '%-6d %s %s' % (pid,severity,name)
        sys.exit(0)

    if opts.group_by_host:
        nms.order_by('address','-severity')
    else:
        nms.order_by('-severity','-pluginID')

    last_id = None
    for r in nms:
        if last_id is not None and last_id == r.pluginID:
            continue
        last_id = r.pluginID
        for out in outputs:
            out.header(SEVERITY_NAMES[r.severity],r.pluginName)
        if opts.group_by_host:
            for out in outputs:
                out.row(None,label='Hosts',
                    fields=[r.address.ipdadress]
                )
        else:
            for out in outputs:
                out.row(None,label='Hosts',
                    fields=[', '.join([
                        a.ipaddress \
                        for a in sorted(nms.pluginid_hostmap[r.pluginID])
                    ])]
                )
        for k in REPORT_FIELD_ORDER:
            if not r.has_key(k) or r[k] is None: 
                continue
            label = REPORT_FIELD_TITLES[k]
            if type(r[k]) == list:
                for out in outputs:
                    out.row(None,label=label,fields=['\n'.join(r[k])])
            else:
                for out in outputs:
                    out.row(None,label=label,fields=[r[k]])

        if opts.plugin_output and r.has_key('plugin_output'):
            for out in outputs:
                out.row(
                    None,label='Details',fields=['\n'.join(r['plugin_output'])]
                )
        
    log.debug(nms.counters())
    for out in outputs:
        out.write()

except ReportParserError,e:
    sys.exit(error(e))

