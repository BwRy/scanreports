#!/usr/bin/env python
#
# Show results from mbsa reports
#

import os,sys,logging

from seine.address import IPv4Address,IPv6Address

from scanreports.script import prepare,initialize,error
from scanreports import ReportParserError
from scanreports.nessus import NessusXMLReport

HTML_OUTPUT_HEADER = """<html>
<head><title>Nessus Report %(title)s</title></head>
<style type="text/css">
body { margin: 0; padding: 0 }
h3 { margin: 5px; padding: 0; }
table { margin: 5px; padding: 0; border-collapse: collapse; }
td { border: 1px solid black; vertical-align: top; }
td.filler { border: none; heigth: 10px; }
td.info { background-color: #ddeedd; }
td.low { background-color: #fdff6b; }
td.medium { background-color: #ffb565; }
td.high { background-color: #ff5050; }
td.title { font-weight: bold; }
</style>
</html>
<body>
  <h3>Nessus Report - %(title)s</h3>
<table>
"""

HTML_OUTPUT_TAIL = """
</table>
</body>
</html>"""

DEFAULT_FILTERED_PLUGINS = [0]
SEVERITY_NAMES = ['Info','Low','Medium','High']

REPORT_FIELD_ORDER = [
    'synopsis',
    'exploitability_ease',
    'solution',
    'description',
    'cve',
    'xref',
    'see_also',
]
REPORT_FIELD_TITLES = {
    'hosts':                 'Hosts',
    'synopsis':             'Synopsis',
    'exploitability_ease':  'Exploitability',
    'solution':             'Solution',
    'description':          'Description',
    'cve':                  'CVEs',
    'xref':                 'References',
    'see_also':             'Links',
}

parser = prepare(sys.argv)
parser.set_usage("""%s [options] <nessus-xml-report>

Processes the nessus XML report (only one!) given on command line and outputs
details from the report according to given options.""" % 
    os.path.basename(sys.argv[0])
)   
parser.add_option('-a','--addresses',help='Only show given addresses from report')
parser.add_option('-o','--output-html',help='Write output to HTML file')
parser.add_option('-O','--output-csv',help='Write output to CSV file')
parser.add_option('-f','--filter-plugins',help='File listing filtered plugin IDs')
parser.add_option('-g','--group-by-host',action='store_true',help='Group Findings by Host')
parser.add_option('-l','--list-plugin-ids',action='store_true',help='List plugin IDs with data')
(opts,args) = initialize(parser)
log = logging.getLogger('console')

if len(args) == 0:
    sys.exit(error(parser.get_usage()))

class filewriter(object):
    def __init__(self,opts):
        self.fd = None
        self.path = None
        self.format = format
        if opts.output_csv:
            self.path = opts.output_csv
            self.fd = open(opts.output_csv,'w')
            self.format = 'csv'
        if opts.output_html:
            self.path = opts.output_html
            self.format = 'html'
        self.open()

    def open(self):
        if self.path is None: 
            return
        self.close()
        try:
            self.fd = open(self.path,'w')
            if self.format == 'html':
                if opts.group_by_host:
                    self.fd.write(HTML_OUTPUT_HEADER % { 'title': 'Sorted by Address and Severity' })
                else:
                    self.fd.write(HTML_OUTPUT_HEADER % { 'title': 'Sorted by Severity and Address' })
        except OSError,(ecode,emsg):
            raise ReportParserError('Error opening %s: %s' % (self.path,emsg))
        except OSError,(ecode,emsg):
            raise ReportParserError('Error opening %s: %s' % (self.path,emsg))

    def close(self):
        if self.fd is not None:
            if self.format == 'html':
                self.fd.write(HTML_OUTPUT_TAIL)
            self.fd.close()

    def header(self,severity,title,plugin_id):
        text = SEVERITY_NAMES[severity]
        colorclass = text.lower()
        if self.format == 'csv':
            self.fd.write('%s\t%s\n' % (text,title))
        elif self.format == 'html':
            self.fd.write('<tr><td class="filler">&nbsp;</td></tr>')
            self.fd.write('<tr><td class="%s">%s</td><td class="title">%s</td></tr>\n' % (colorclass,text,title))
        else:
            print '%s %s %s' % (text,plugin_id,title)

    def msg(self,*args):
        args = list(args)
        if args[0] == 'hosts':
            # TODO - do something more interesting for host lists
            args[1] = ', '.join(args[1])
        try:
            args[0] = REPORT_FIELD_TITLES[args[0]]
        except KeyError:
            pass
            
        if self.format == 'csv':
            self.fd.write('%s\n' % '\t'.join(args))
        elif self.format == 'html':
            self.fd.write('<tr><td>%s</td><td>%s</td></tr>\n' % (args[0],args[1]))
        else:
            print '%s' % '\t'.join(args)

try:
    writer = filewriter(opts)
    nms = NessusXMLReport(args[0])

    if opts.filter_plugins:
        nms.resultset.filter_pluginlist(
            opts.filter_plugins,
            set(DEFAULT_FILTERED_PLUGINS)
        )
    else:
        nms.resultset.filter(
            lambda x: x.pluginID not in set(DEFAULT_FILTERED_PLUGINS)
        )

    if opts.addresses: 
        nms.resultset.match_addresslist(opts.addresses.split(','))

    if opts.list_plugin_ids:
        id_details = {}
        for r in nms.resultset:
            if r.pluginID in id_details.keys():
                continue
            id_details[r.pluginID] = r.pluginName
        for pid in sorted(id_details.keys()):
            print '%-6d %s' % (pid,id_details[pid])
        sys.exit(0)

    if opts.group_by_host:
        nms.resultset.order_by('address','-severity')
    else:
        nms.resultset.order_by('-severity','address')

    for r in nms.resultset:
        writer.header(r.severity,r.pluginName,plugin_id=r.pluginID)
        if not opts.group_by_host:
            writer.msg('hosts',nms.resultset.pluginid_hosts(r.pluginID))
        else:
            writer.msg('hosts',[r.address.ipaddress])
        for k in REPORT_FIELD_ORDER:
            if not r.has_key(k) or r[k] is None: 
                continue
            if type(r[k]) == list:
                writer.msg(k,' '.join(r[k]))
            else:
                writer.msg(k,r[k])
    log.debug(nms.resultset.counters())
    writer.close()

except ReportParserError,e:
    sys.exit(error(e))

